import numpy as np
import cv2 as cv
import yaml
from pathlib import Path

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≥–ª–æ–≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ (–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫!)
CHESSBOARD_CORNER_NUM_X = 8
CHESSBOARD_CORNER_NUM_Y = 6
SQUARE_SIZE_MM = 25  # üîπ –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25 –º–º)

IMAGE_SRC = "cam_images"
CAMERA_PARAMETERS_OUTPUT_FILE = "cam1.yaml"

# root directory of repo for relative path specification.
root = Path(__file__).parent.absolute()

# Set path to the images
calib_imgs_path = root.joinpath(IMAGE_SRC)

# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–ª–æ–≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
objp = np.zeros((CHESSBOARD_CORNER_NUM_X * CHESSBOARD_CORNER_NUM_Y, 3), np.float32)
objp[:, :2] = np.mgrid[0:CHESSBOARD_CORNER_NUM_X, 0:CHESSBOARD_CORNER_NUM_Y].T.reshape(-1, 2)
objp *= SQUARE_SIZE_MM  # üîπ –¢–µ–ø–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–æ–∫

# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫
objpoints = []  # 3D —Ç–æ—á–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ)
imgpoints = []  # 2D —Ç–æ—á–∫–∏ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)

images = calib_imgs_path.glob('*.JPG')  # –ë–µ—Ä–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG

for fname in images:
    img = cv.imread(str(root.joinpath(fname)))
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

    # –ü–æ–∏—Å–∫ —É–≥–ª–æ–≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
    ret, corners = cv.findChessboardCorners(gray, (CHESSBOARD_CORNER_NUM_X, CHESSBOARD_CORNER_NUM_Y), None)

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —É–≥–ª—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if ret:
        objpoints.append(objp)
        corners2 = cv.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        imgpoints.append(corners2)

        # –†–∏—Å—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É–≥–ª—ã
        cv.drawChessboardCorners(img, (CHESSBOARD_CORNER_NUM_X, CHESSBOARD_CORNER_NUM_Y), corners2, ret)
        cv.imshow('img', img)
        cv.waitKey(50)
    else:
        print(f'‚ö†Ô∏è –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {fname}')

cv.destroyAllWindows()

print("üì∑ –ö–∞–ª–∏–±—Ä—É–µ–º –∫–∞–º–µ—Ä—É...")

# –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

print("\nüìè –ú–∞—Ç—Ä–∏—Ü–∞ –∫–∞–º–µ—Ä—ã:\n", mtx)
print("\nüîÑ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–∏—Å—Ç–æ—Ä—Å–∏–∏:\n", dist)

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
mean_error = 0
for i in range(len(objpoints)):
    imgpoints2, _ = cv.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)
    error = cv.norm(imgpoints[i], imgpoints2, cv.NORM_L2) / len(imgpoints2)
    mean_error += error

print(f"\n‚úÖ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {mean_error / len(objpoints)}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ YAML
data = {
    "camera_matrix": mtx.tolist(),
    "dist_coeff": dist.tolist(),
    "square_size_mm": SQUARE_SIZE_MM
}

with open(CAMERA_PARAMETERS_OUTPUT_FILE, "w") as f:
    yaml.dump(data, f)

print(f"\nüìÇ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {CAMERA_PARAMETERS_OUTPUT_FILE}")