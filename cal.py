import numpy as np
import cv2 as cv
import yaml

# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
CHESSBOARD_CORNER_NUM_X = 8  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≥–ª—ã –ø–æ X
CHESSBOARD_CORNER_NUM_Y = 6  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≥–ª—ã –ø–æ Y
SQUARE_SIZE_MM = 25  # –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –º–º
CAMERA_PARAMETERS_OUTPUT_FILE = "cam1.yaml"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ —É–≥–ª–æ–≤
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä)
objp = np.zeros((CHESSBOARD_CORNER_NUM_X * CHESSBOARD_CORNER_NUM_Y, 3), np.float32)
objp[:, :2] = np.mgrid[0:CHESSBOARD_CORNER_NUM_X, 0:CHESSBOARD_CORNER_NUM_Y].T.reshape(-1, 2)
objp *= SQUARE_SIZE_MM  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–æ–∫

# üîπ –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫
objpoints = []  # 3D —Ç–æ—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
imgpoints = []  # 2D —Ç–æ—á–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

# üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
cap = cv.VideoCapture(0)  # –ò–Ω–¥–µ–∫—Å 0 - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞

if not cap.isOpened():
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É!")
    exit()

print("\nüì∑ –ù–∞–π–¥–∏ —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É –≤ –∫–∞–¥—Ä–µ –∏ –Ω–∞–∂–º–∏ 's' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏.")
print("üöÄ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–∂–º–∏ 'q'.")

while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä.")
        break

    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

    # üîπ –ü–æ–∏—Å–∫ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
    found, corners = cv.findChessboardCorners(gray, (CHESSBOARD_CORNER_NUM_X, CHESSBOARD_CORNER_NUM_Y), None)

    if found:
        corners2 = cv.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        cv.drawChessboardCorners(frame, (CHESSBOARD_CORNER_NUM_X, CHESSBOARD_CORNER_NUM_Y), corners2, found)

    cv.imshow("Camera Calibration", frame)

    key = cv.waitKey(1) & 0xFF

    if key == ord('s') and found:
        objpoints.append(objp)
        imgpoints.append(corners2)
        print(f"‚úÖ –£–≥–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–∫—É—â–∏–µ –∫–∞–¥—Ä—ã: {len(objpoints)}")

    if key == ord('q') and len(objpoints) > 0:
        break

cap.release()
cv.destroyAllWindows()

# üîπ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
print("üì∑ –ö–∞–ª–∏–±—Ä—É–µ–º –∫–∞–º–µ—Ä—É...")
ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

print("\nüìè –ú–∞—Ç—Ä–∏—Ü–∞ –∫–∞–º–µ—Ä—ã:\n", mtx)
print("\nüîÑ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–∏—Å—Ç–æ—Ä—Å–∏–∏:\n", dist)

# üîπ –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
mean_error = 0
for i in range(len(objpoints)):
    imgpoints2, _ = cv.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)
    error = cv.norm(imgpoints[i], imgpoints2, cv.NORM_L2) / len(imgpoints2)
    mean_error += error

print(f"\n‚úÖ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {mean_error / len(objpoints)}")

# üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ YAML
data = {
    "camera_matrix": mtx.tolist(),
    "dist_coeff": dist.tolist(),
    "square_size_mm": SQUARE_SIZE_MM
}

with open(CAMERA_PARAMETERS_OUTPUT_FILE, "w") as f:
    yaml.dump(data, f)

print(f"\nüìÇ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {CAMERA_PARAMETERS_OUTPUT_FILE}")